{"version":3,"sources":["types.ts","redux/mainMenuSlice.ts","redux/finishSlice.ts","cssStyles.tsx","config.ts","main/MainMenu.tsx","util/client.js","util/utilityFunctions.ts","redux/videoSlice.ts","main/Video.tsx","img/placeholder_waveform.png","main/Timeline.tsx","main/CuttingActions.tsx","main/FinishMenu.tsx","redux/workflowPostSlice.ts","main/Save.tsx","redux/abortSlice.ts","main/Discard.tsx","main/WorkflowSelection.tsx","redux/workflowPostAndProcessSlice.ts","main/WorkflowConfiguration.tsx","main/Finish.tsx","main/MainContent.tsx","main/TheEnd.tsx","main/Body.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["MainMenuStateNames","initialState","value","cutting","mainMenuSlice","createSlice","name","reducers","setState","state","action","payload","actions","selectMainMenuState","mainMenuState","finishSlice","pageNumber","setPageNumber","selectFinishState","finishState","selectPageNumber","mediaPackageId","GlobalStyle","styles","globalStyle","basicButtonStyle","css","borderRadius","cursor","transitionDuration","transitionProperty","transform","display","justifyContent","alignItems","gap","textAlign","backOrContinueStyle","flexDirection","MainMenuButton","iconName","stateName","dispatch","useDispatch","activeState","useSelector","mainMenuButtonStyle","width","height","backgroundColor","title","onClick","finish","icon","size","MainMenu","style","borderRight","flexShrink","padding","faFilm","faListUl","metadata","faPhotoVideo","thumbnail","faSignOutAlt","urlParams","URLSearchParams","window","location","search","has","tmp","get","loadContextSettings","a","basepath","process","endsWith","settingsPath","REACT_APP_SETTINGS_PATH","base","startsWith","url","origin","fetch","response","console","warn","status","debug","ok","error","statusText","headers","parseToml","text","SyntaxError","init","then","result","key","client","endpoint","body","customConfig","encoded","btoa","unescape","encodeURIComponent","authHeaders","config","method","JSON","stringify","data","length","parse","Error","Promise","reject","message","post","roundToDecimalPlace","num","decimalPlace","decimalFactor","Math","pow","round","Number","EPSILON","isPlaying","isPlayPreview","currentlyAt","segments","id","nanoid","start","end","deleted","tracks","activeSegmentIndex","selectedWorkflowIndex","previewTriggered","videoURLs","videoCount","duration","presenters","workflows","undefined","fetchVideoInformation","createAsyncThunk","argument","videoSlice","setIsPlaying","setIsPlayPreview","setPreviewTriggered","setCurrentlyAt","updateActiveSegment","skipDeletedSegments","setCurrentlyAtInSeconds","addSegment","push","cut","segmentA","segmentB","splice","markAsDeletedOrAlive","setSelectedWorkflowIndex","mergeLeft","mergeSegments","mergeRight","extraReducers","builder","addCase","pending","fulfilled","reduce","o","uri","parseSegments","sort","n1","n2","displayOrder","rejected","findIndex","element","newSegments","forEach","mergeSegmentIndex","min","max","endTime","index","selectIsPlaying","videoState","selectIsPlayPreview","selectPreviewTriggered","selectCurrentlyAt","selectCurrentlyAtInSeconds","selectSegments","selectActiveSegmentIndex","selectIsCurrentSegmentAlive","selectSelectedWorkflowIndex","selectVideoURL","selectVideoCount","selectDuration","selectDurationInSeconds","selectTitle","selectPresenters","selectTracks","selectWorkflows","VideoPlayer","isMuted","testTmp","ref","useRef","useState","ready","setReady","useEffect","current","seekTo","playing","muted","onProgress","playedSeconds","progressInterval","onReady","onEnded","VideoControls","videoControlStyle","videoControlsRowStyle","playButtonStyle","playPreviewStyle","faEyeSlash","faEye","faToggleOn","faToggleOff","faPause","faPlay","Date","toISOString","substr","VideoHeader","titleStyle","join","Video","content","videoURLStatus","className","videoPlayers","i","videoAreaStyle","borderBottom","videoPlayerAreaStyle","Scrubber","timelineWidth","x","y","controlledPosition","setControlledPosition","isGrabbed","setIsGrabbed","wasCurrentlyAtRef","nodeRef","React","updateXPos","scrubberStyle","position","zIndex","boxShadow","scrubberDragHandleStyle","scrubberDragHandleIconStyle","onStart","onStop","e","axis","bounds","disabled","faBars","SegmentsList","bgColor","segmentsStyle","paddingTop","map","segment","borderStyle","borderColor","borderWidth","boxSizing","Timeline","useResizeObserver","timelineStyle","alt","src","myImg","top","cuttingActionButtonStyle","CuttingActionsButton","actionName","MarkAsDeletedButton","isCurrentSegmentAlive","faTrash","faTrashRestore","CuttingActions","cuttingStyle","blockStyle","faCut","faStepBackward","faStepForward","faQuestion","FinishMenuButton","finishMenuButtonStyle","fontSize","FinishMenu","finishMenuStyle","faSave","faFileExport","faTimesCircle","postVideoInformation","convertSegments","workflowPostSlice","selected","selectStatus","workflowPostState","selectError","workflowPostAndProcessState","SaveButton","workflowStatus","spin","faSpinner","faCheck","faExclamationCircle","saveButtonStyle","Save","postWorkflowStatus","postError","saveStyle","errorBoxStyle","fontWeight","label","faChevronLeft","abortSlice","selectAbortState","abortState","DiscardButton","setAbortState","Discard","cancelStyle","WorkflowButton","workflowIndex","workflowButtonStyle","WorkflowSelection","workflowSelectionStyle","workflowSelectionSelectionStyle","workflow","faChevronRight","postVideoInformationWithWorkflow","workflowID","workflowPostAndProcessSlice","SaveAndProcessButton","WorkflowConfiguration","postAndProcessWorkflowStatus","postAndProcessError","workflowConfigurationStyle","faTools","PageButton","pageButtonStyle","Finish","pageZeroStyle","pageOneStyle","pageTwoStyle","MainContent","paddingRight","paddingLeft","finishStyle","defaultStyle","TheEnd","postAndProcessState","theEndStyle","faCheckCircle","Body","postAndProcessSelectStatus","bodyStyle","Fragment","App","ms","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","mainMenuStateReducer","finishStateReducer","videoReducer","workflowPostReducer","workflowPostAndProcessReducer","abortReducer","initialize","race","resolve","setTimeout","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.314d20ce.chunk.js","sourcesContent":["export interface Segment {\n  id: string,\n  start: number,\n  end: number,\n  deleted: boolean,\n}\n\nexport interface Track {\n  id: string,\n  uri: string,\n  flavor: any,\n  audioStream: any,\n  videoStream: any,\n}\n\nexport interface TimelineState {\n  segments: Segment[]\n  scrubberPos: number\n}\n\nexport interface RequestArgument {\n  mediaPackageId: string\n}\n\nexport interface PostEditArgument extends RequestArgument {\n  segments: Segment[]\n  tracks: Track[]\n}\n\nexport interface PostAndProcessEditArgument extends PostEditArgument{\n  workflowID: string[]\n}\n\nexport enum MainMenuStateNames {\n  cutting = \"Cutting\",\n  metadata = \"Metadata\",\n  thumbnail = \"Thumbnail\",\n  finish = \"Finish\",\n}\n\nexport interface httpRequestState {\n  status: 'idle' | 'loading' | 'success' | 'failed',\n  error: string | undefined\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { MainMenuStateNames} from '../types'\n\nexport interface mainMenu {\n  value: MainMenuStateNames,\n}\n\nconst initialState: mainMenu = {\n  value: MainMenuStateNames.cutting,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const mainMenuSlice = createSlice({\n  name: 'mainMenuState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<mainMenu[\"value\"]>) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = mainMenuSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectMainMenuState = (state: { mainMenuState: { value: mainMenu[\"value\"]; }; }) => state.mainMenuState.value\n\nexport default mainMenuSlice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface finish {\n  value: \"Save changes\" | \"Start processing\" | \"Discard changes\" | undefined,\n  pageNumber: number,\n}\n\nconst initialState: finish = {\n  value: \"Start processing\",\n  pageNumber: 0,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const finishSlice = createSlice({\n  name: 'finishState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<finish[\"value\"]>) => {\n      state.value = action.payload;\n    },\n    setPageNumber: (state, action) => {\n      state.pageNumber = action.payload;\n    }\n  }\n})\n\n// Export Actions\nexport const { setState, setPageNumber } = finishSlice.actions\n\n// Export Selectors\nexport const selectFinishState = (state: { finishState: { value: finish[\"value\"]; }; }) => state.finishState.value\nexport const selectPageNumber = (state: { finishState: { pageNumber: finish[\"pageNumber\"]; }; }) => state.finishState.pageNumber\n\nexport default finishSlice.reducer\n","/**\n * This file contains general css stylings\n */\nimport { css, Global } from '@emotion/core'\nimport React from \"react\";\n\n/**\n * An emotion component that inserts styles globally\n * Is removed when the styles change or when the Global component unmounts.\n */\nexport const GlobalStyle: React.FC = () => {\n  return (\n    <Global styles={globalStyle} />\n  );\n}\n\n/**\n * CSS for the global style component\n */\nexport const globalStyle = css({\n  body: {\n    backgroundColor: 'snow',\n    fontSize: 'medium',\n    // Makes the body span to the bottom of the page\n    minHeight: \"100vh\",\n  },\n});\n\n/**\n * CSS for buttons\n */\nexport const basicButtonStyle = css({\n  borderRadius: '10px',\n  cursor: \"pointer\",\n  // Animation\n  transitionDuration: \"0.3s\",\n  transitionProperty: \"transform\",\n  \"&:hover\": {\n    transform: 'scale(1.1)',\n  },\n  \"&:active\": {\n    transform: 'scale(0.9)',\n  },\n  // Flex position child elements\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  gap: '10px',\n  textAlign: 'center' as const,\n});\n\n/**\n * CSS for a container that holds back/forward buttons\n */\nexport const backOrContinueStyle = css(({\n  display: 'flex',\n  flexDirection: 'row' as const,\n  gap: '20px',\n}))","/**\n * A place for global config values\n */\nimport parseToml from '@iarna/toml/parse-string';\n\n\n/**\n * Hardcoded id of the mediapackage the editor will work on\n */\n\n\nexport var mediaPackageId : string\nvar urlParams = new URLSearchParams(window.location.search);\nif (urlParams.has(\"mediaPackageId\")) {\n  let tmp = urlParams.get(\"mediaPackageId\")\n  if (tmp) {\n    mediaPackageId = tmp\n  }\n}\n\n\nconst CONTEXT_SETTINGS_FILE = 'editor-settings.toml';\n\nexport const loadContextSettings = async () => {\n\n  // Try to retrieve the context settings.\n  let basepath = process.env.PUBLIC_URL || '/';\n  if (!basepath.endsWith('/')) {\n    basepath += '/';\n  }\n\n  // Construct path to settings file. If the `REACT_APP_SETTINGS_PATH` is\n  // given and starts with '/', it is interpreted as absolute path from the\n  // server root.\n  const settingsPath = process.env.REACT_APP_SETTINGS_PATH || CONTEXT_SETTINGS_FILE;\n  const base = settingsPath.startsWith('/') ? '' : basepath;\n  const url = `${window.location.origin}${base}${settingsPath}`;\n  let response;\n  try {\n    response = await fetch(url);\n  } catch (e) {\n    console.warn(`Could not access '${settingsPath}' due to network error!`, e || \"\");\n    return null;\n  }\n\n  if (response.status === 404) {\n    // If the settings file was not found, we silently ignore the error. We\n    // expect many installation to provide this file.\n    console.debug(`'${settingsPath}' returned 404: ignoring`);\n    return null;\n  } else if (!response.ok) {\n    console.error(\n      `Fetching '${settingsPath}' failed: ${response.status} ${response.statusText}`\n    );\n    return null;\n  }\n\n  if (response.headers.get('Content-Type')?.startsWith('text/html')) {\n    console.warn(`'${settingsPath}' request has 'Content-Type: text/html' -> ignoring...`);\n    return null;\n  }\n\n  try {\n    return parseToml(await response.text());\n  } catch (e) {\n    console.error(`Could not parse '${settingsPath}' as TOML: `, e);\n    throw new SyntaxError(`Could not parse '${settingsPath}' as TOML: ${e}`);\n  }\n\n};\n\nexport const init = async () => {\n  await loadContextSettings().then((result) => {\n\n    for (const key in result) {\n      if (key === \"debugging\") {\n        if (result[key][\"mediaPackageId\"]) {\n          mediaPackageId = result[key][\"mediaPackageId\"]\n        }\n      }\n    }\n  })\n};\n\n// callLoad();\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm, faListUl, faPhotoVideo, faSignOutAlt, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setState, selectMainMenuState, mainMenu } from '../redux/mainMenuSlice'\nimport { setPageNumber } from '../redux/finishSlice'\n\nimport { MainMenuStateNames } from '../types'\nimport { basicButtonStyle } from '../cssStyles'\n\n/**\n * A container for selecting the functionality shown in the main part of the app\n */\nconst MainMenu: React.FC<{}> = () => {\n\n  const mainMenuStyle = {\n    borderRight: '1px solid #BBB',\n    width: '100px',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    flexShrink: 0,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '30px',\n  };\n\n  return (\n    <div style={mainMenuStyle} title=\"MainMenu\">\n      <MainMenuButton iconName={faFilm} stateName={MainMenuStateNames.cutting}/>\n      <MainMenuButton iconName={faListUl} stateName={MainMenuStateNames.metadata}/>\n      <MainMenuButton iconName={faPhotoVideo} stateName={MainMenuStateNames.thumbnail}/>\n      <MainMenuButton iconName={faSignOutAlt} stateName={MainMenuStateNames.finish}/>\n    </div>\n  );\n};\n\n/**\n * A button to set the state of the app\n * @param param0\n */\nconst MainMenuButton: React.FC<{iconName: IconDefinition, stateName: mainMenu[\"value\"]}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n  const activeState = useSelector(selectMainMenuState)\n\n  const mainMenuButtonStyle = css({\n    width: '100%',\n    height: '100px',\n    ...(activeState === stateName) && {\n      backgroundColor: '#DDD',\n    },\n    flexDirection: 'column' as const,\n  });\n\n  return (\n    <div css={[basicButtonStyle, mainMenuButtonStyle]} title={stateName}\n      onClick={() => {\n        dispatch(setState(stateName));\n        if (stateName === MainMenuStateNames.finish) {\n          dispatch(setPageNumber(0))\n        }\n      }}>\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{stateName}</div>\n    </div>\n  );\n};\n\nexport default MainMenu;\n","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\n/**\n * Client I stole this form a react tutorial\n */\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const encoded = btoa(unescape(encodeURIComponent(\n    \"admin:opencast\"\n  )));\n  const authHeaders = { 'Authorization': `Basic ${encoded}` };\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n      ...authHeaders,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  let text\n  try {\n    const response = await window.fetch(endpoint, config)\n    text = await response.text()\n    text.length ? data = JSON.parse(text) : data = ''\n    // data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}","export const roundToDecimalPlace = (num: number, decimalPlace: number) => {\n  let decimalFactor = Math.pow(10, decimalPlace)\n  return Math.round((num + Number.EPSILON) * decimalFactor) / decimalFactor\n}\n\n\n// Returns a promise that resolves after `ms` milliseconds.\nexport const sleep = (ms: number) => new Promise((resolve, reject) => setTimeout(resolve, ms));","import { createSlice, nanoid, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\n\nimport { Segment, httpRequestState, Track, RequestArgument }  from '../types'\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\nimport { WritableDraft } from 'immer/dist/internal';\n\nexport interface video {\n  isPlaying: boolean,             // Are videos currently playing?\n  isPlayPreview: boolean,         // Should deleted segments be skipped?\n  previewTriggered: boolean,      // Basically acts as a callback for the video players. TODO: Figure out how to do callbacks\n  currentlyAt: number,            // Position in the video in milliseconds\n  segments: Segment[],\n  tracks: Track[],\n  activeSegmentIndex: number,     // Index of the segment that is currenlty hovered\n  selectedWorkflowIndex: number,  // Index of the currently selected workflow\n\n  videoURLs: string[],  // Links to each video\n  videoCount: number,   // Total number of videos\n  duration: number,     // Video duration in milliseconds\n  title: string,\n  presenters: string[],\n  workflows: string[],\n}\n\nconst initialState: video & httpRequestState = {\n  isPlaying: false,\n  isPlayPreview: true,\n  currentlyAt: 0,   // Position in the video in milliseconds\n  segments: [{id: nanoid(), start: 0, end: 1, deleted: false}],\n  tracks: [],\n  activeSegmentIndex: 0,\n  selectedWorkflowIndex: 0,\n  previewTriggered: false,\n\n  videoURLs: [],\n  videoCount: 0,\n  duration: 0,\n  title: '',\n  presenters: [],\n  workflows: [],\n\n  status: 'idle',\n  error: undefined,\n}\n\nexport const fetchVideoInformation = createAsyncThunk('video/fetchVideoInformation', async (argument: RequestArgument) => {\n  // const response = await client.get('https://legacy.opencast.org/admin-ng/tools/ID-dual-stream-demo/editor.json')\n  const response = await client.get(`https://pyca.opencast.org/editor/${argument.mediaPackageId}/edit.json`)\n  return response\n})\n\n/**\n * Slice for the state of the \"video\"\n * Treats the multitude of videos that may exist as one video\n * TODO: Find a way to init the segments array with a starting segment\n */\nexport const videoSlice = createSlice({\n  name: 'videoState',\n  initialState,\n  reducers: {\n    setIsPlaying: (state, action: PayloadAction<video[\"isPlaying\"]>) => {\n      state.isPlaying = action.payload;\n    },\n    setIsPlayPreview: (state, action: PayloadAction<video[\"isPlaying\"]>) => {\n      state.isPlayPreview = action.payload;\n    },\n    setPreviewTriggered: (state, action) => {\n      state.previewTriggered = action.payload\n    },\n    setCurrentlyAt: (state, action: PayloadAction<video[\"currentlyAt\"]>) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload, 3);\n\n      updateActiveSegment(state);\n      skipDeletedSegments(state);\n    },\n    setCurrentlyAtInSeconds: (state, action: PayloadAction<video[\"currentlyAt\"]>) => {\n      state.currentlyAt = roundToDecimalPlace(action.payload * 1000, 3);\n\n      updateActiveSegment(state);\n      skipDeletedSegments(state);\n    },\n    addSegment: (state, action: PayloadAction<video[\"segments\"][0]>) => {\n      state.segments.push(action.payload)\n    },\n    cut: (state) => {\n      // If we're exactly between two segments, we can't split the current segment\n      if (state.segments[state.activeSegmentIndex].start === state.currentlyAt ||\n          state.segments[state.activeSegmentIndex].end === state.currentlyAt ) {\n        return state;\n      }\n\n      // Make two (new) segments out of it\n      let segmentA : Segment =  {id: nanoid(),\n        start: state.segments[state.activeSegmentIndex].start,\n        end: state.currentlyAt,\n        deleted: state.segments[state.activeSegmentIndex].deleted}\n      let segmentB : Segment =  {id: nanoid(),\n        start: state.currentlyAt,\n        end: state.segments[state.activeSegmentIndex].end,\n        deleted: state.segments[state.activeSegmentIndex].deleted}\n\n      // Add the new segments and remove the old one\n      state.segments.splice(state.activeSegmentIndex, 1, segmentA, segmentB);\n    },\n    markAsDeletedOrAlive: (state) => {\n      state.segments[state.activeSegmentIndex].deleted = !state.segments[state.activeSegmentIndex].deleted\n    },\n    setSelectedWorkflowIndex: (state, action: PayloadAction<video[\"selectedWorkflowIndex\"]>) => {\n      state.selectedWorkflowIndex = action.payload\n    },\n    mergeLeft: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex - 1)\n    },\n    mergeRight: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex + 1)\n    },\n  },\n  // For Async Requests\n  extraReducers: builder => {\n    builder.addCase(\n      fetchVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      fetchVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n\n        // // Old API\n        // // eslint-disable-next-line no-sequences\n        // state.videoURLs = action.payload.previews.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        // state.videoCount = action.payload.previews.length\n        // state.duration = action.payload.duration\n        // state.title = action.payload.title\n        // state.presenters = action.payload.presenters\n        // state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        // state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n        //   if (n1.displayOrder > n2.displayOrder) { return 1; }\n        //   if (n1.displayOrder < n2.displayOrder) { return -1; }\n        //   return 0;\n        // });\n\n        // New API\n        // eslint-disable-next-line no-sequences\n        state.videoURLs = action.payload.tracks.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        state.videoCount = action.payload.tracks.length\n        state.duration = action.payload.duration\n        state.title = action.payload.title\n        state.presenters = []\n        state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        state.tracks = action.payload.tracks\n        state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n          if (n1.displayOrder > n2.displayOrder) { return 1; }\n          if (n1.displayOrder < n2.displayOrder) { return -1; }\n          return 0;\n        });\n    })\n    builder.addCase(\n      fetchVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\n/**\n * Helper function to update the activeSegmentIndex\n * @param state\n */\nconst updateActiveSegment = (state: WritableDraft<video>) => {\n  state.activeSegmentIndex = state.segments.findIndex(element =>\n    element.start <= state.currentlyAt && element.end >= state.currentlyAt)\n  // TODO: Proper error handling. Rewrite function?\n  if(state.activeSegmentIndex < 0) {\n    state.activeSegmentIndex = 0\n  }\n}\n\n/**\n * Helper Function for testing with current/old editor API\n */\nconst parseSegments = (segments: any, duration: number) => {\n  let newSegments : Segment[] = []\n\n  if (segments.length === 0) {\n    newSegments.push({id: nanoid(), start: 0, end: duration, deleted: false})\n  }\n\n  segments.forEach((element: { start: any; end: any; deleted: any; }) => {\n    newSegments.push({id: nanoid(), start: element.start, end: element.end, deleted: element.deleted})\n  });\n  return newSegments\n}\n\n/**\n * Helper function for merging two segments\n */\nconst mergeSegments = (state: WritableDraft<video>, activeSegmentIndex: number, mergeSegmentIndex: number) => {\n  // Check if mergeSegmentIndex is valid\n  if (mergeSegmentIndex < 0 || mergeSegmentIndex > state.segments.length - 1) {\n    return\n  }\n\n  // Increase activeSegment length\n  state.segments[activeSegmentIndex].start = Math.min(\n    state.segments[activeSegmentIndex].start, state.segments[mergeSegmentIndex].start)\n  state.segments[activeSegmentIndex].end = Math.max(\n    state.segments[activeSegmentIndex].end, state.segments[mergeSegmentIndex].end)\n\n  // Remove the other segment\n  state.segments.splice(mergeSegmentIndex, 1);\n\n  // Update active segment\n  updateActiveSegment(state)\n}\n\nconst skipDeletedSegments = (state: WritableDraft<video>) => {\n  if(state.isPlaying && state.segments[state.activeSegmentIndex].deleted && state.isPlayPreview) {\n      let endTime = state.segments[state.activeSegmentIndex].end\n      let index = state.activeSegmentIndex\n      while (index < state.segments.length && state.segments[index].deleted) {\n        endTime = state.segments[index].end\n        index++\n      }\n      state.currentlyAt = endTime\n      state.previewTriggered = true\n    }\n}\n\nexport const { setIsPlaying, setIsPlayPreview, setCurrentlyAt, setCurrentlyAtInSeconds, addSegment, cut, markAsDeletedOrAlive,\n  setSelectedWorkflowIndex, mergeLeft, mergeRight, setPreviewTriggered } = videoSlice.actions\n\n// Export selectors\n// Selectors mainly pertaining to the video state\nexport const selectIsPlaying = (state: { videoState: { isPlaying: video[\"isPlaying\"] }; }) =>\n  state.videoState.isPlaying\nexport const selectIsPlayPreview = (state: { videoState: { isPlayPreview: video[\"isPlayPreview\"] }; }) =>\n  state.videoState.isPlayPreview\nexport const selectPreviewTriggered = (state: { videoState: { previewTriggered: video[\"previewTriggered\"] } }) =>\n  state.videoState.previewTriggered\nexport const selectCurrentlyAt = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt\nexport const selectCurrentlyAtInSeconds = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt / 1000\nexport const selectSegments = (state: { videoState: { segments: video[\"segments\"] } }) =>\n  state.videoState.segments\nexport const selectActiveSegmentIndex = (state: { videoState: { activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  state.videoState.activeSegmentIndex\nexport const selectIsCurrentSegmentAlive = (state: { videoState:\n  { segments: { [x: number]: { deleted: boolean; }; }; activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  !state.videoState.segments[state.videoState.activeSegmentIndex].deleted\nexport const selectSelectedWorkflowIndex = (state: { videoState:\n  { selectedWorkflowIndex: video[\"selectedWorkflowIndex\"]; }; }) =>\n  state.videoState.selectedWorkflowIndex\n\n// Selectors mainly pertaining to the information fetched from Opencast\nexport const selectVideoURL = (state: { videoState: { videoURLs: video[\"videoURLs\"] } }) => state.videoState.videoURLs\nexport const selectVideoCount = (state: { videoState: { videoCount: video[\"videoCount\"] } }) => state.videoState.videoCount\nexport const selectDuration = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration\nexport const selectDurationInSeconds = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration / 1000\nexport const selectTitle = (state: { videoState: { title: video[\"title\"] } }) => state.videoState.title\nexport const selectPresenters = (state: { videoState: { presenters: video[\"presenters\"] } }) => state.videoState.presenters\nexport const selectTracks = (state: { videoState: { tracks: video[\"tracks\"] } }) =>\n  state.videoState.tracks\nexport const selectWorkflows = (state: { videoState: { workflows: video[\"workflows\"] } }) => state.videoState.workflows\n\nexport default videoSlice.reducer\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { httpRequestState } from '../types'\nimport { mediaPackageId } from '../config'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faToggleOn, faToggleOff, faEye, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectCurrentlyAtInSeconds, setIsPlaying, setCurrentlyAtInSeconds,\n  fetchVideoInformation, selectVideoURL, selectVideoCount, selectDurationInSeconds, selectTitle, selectPresenters,\n  setPreviewTriggered, selectPreviewTriggered, selectIsPlayPreview, setIsPlayPreview\n} from '../redux/videoSlice'\n\nimport ReactPlayer from 'react-player'\n\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\n\n/**\n * Container for the videos and their controls\n * TODO: Complete fetching\n * TODO: Move fetching to a more central part of the app\n */\nconst Video: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch()\n  const videoURLs = useSelector(selectVideoURL)\n  const videoCount = useSelector(selectVideoCount)\n  const videoURLStatus = useSelector((state: { videoState: { status: httpRequestState[\"status\"] } }) => state.videoState.status);\n  const error = useSelector((state: { videoState: { error: httpRequestState[\"error\"] } }) => state.videoState.error)\n\n  // Try to fetch URL from external API\n  useEffect(() => {\n    if (videoURLStatus === 'idle') {\n      dispatch(fetchVideoInformation({mediaPackageId: mediaPackageId}))\n    }\n  }, [videoURLStatus, dispatch])\n\n  // Update based on current fetching status\n  let content\n  if (videoURLStatus === 'loading') {\n    content = <div className=\"loader\">Loading...</div>\n  } else if (videoURLStatus === 'success') {\n    content = \"\"//<div className=\"loader\">Success...</div>\n  } else if (videoURLStatus === 'failed') {\n    content = <div>{error}</div>\n  }\n\n  // Initialize video players\n  const videoPlayers: JSX.Element[] = [];\n  for (let i = 0; i < videoCount; i++) {\n    // videoPlayers.push(<VideoPlayer key={i} url='https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4' />);\n    videoPlayers.push(<VideoPlayer key={i} url={videoURLs[i]} isMuted={i === 0}/>);\n  }\n\n  // Style\n  const videoAreaStyle = css({\n    display: 'flex',\n    width: 'auto',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '10px',\n    borderBottom: '1px solid #BBB',\n  });\n\n  const videoPlayerAreaStyle = css({\n    backgroundColor: 'black',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  });\n\n  return (\n    <div css={videoAreaStyle} title=\"Video Area\">\n      {content}\n      <VideoHeader />\n      <div css={videoPlayerAreaStyle} title=\"Video Player Area\">\n        {videoPlayers}\n      </div>\n      <VideoControls />\n    </div>\n  );\n};\n\n/**\n * A single video player\n * @param param0\n */\nconst VideoPlayer: React.FC<{url: string, isMuted: boolean}> = ({url, isMuted}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAtInSeconds)\n  const duration  = useSelector(selectDurationInSeconds)\n  const testTmp = useSelector(selectPreviewTriggered)\n\n  // Init state variables\n  const ref = useRef<ReactPlayer>(null);\n  const [ready, setReady] = useState(false);\n\n  // Callback for when the video is playing\n  const onProgressCallback = (state: { played: number, playedSeconds: number, loaded: number, loadedSeconds:  number }) => {\n    // Only update redux if there was a substantial change\n    if (roundToDecimalPlace(currentlyAt, 3) !== roundToDecimalPlace(state.playedSeconds, 3)) {\n      dispatch(setCurrentlyAtInSeconds(state.playedSeconds))\n    }\n  }\n\n  // Callback for checking whether the video element is ready\n  const onReadyCallback = () => {\n    setReady(true);\n  }\n\n  const onEndedCallback = () => {\n    dispatch(setIsPlaying(false));\n    dispatch(setCurrentlyAtInSeconds(duration)); // It seems onEnded is called before the full duration is reached, so we set currentlyAt to the very end\n  }\n\n  useEffect(() => {\n    // Seek if the position in the video got changed externally\n    if(!isPlaying && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n    }\n    if(testTmp && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n      dispatch(setPreviewTriggered(false))\n    }\n  })\n\n  return (\n    <ReactPlayer url={url}\n      ref={ref}\n      width='100%'\n      height='auto'\n      playing={isPlaying}\n      muted={isMuted}\n      onProgress={onProgressCallback}\n      progressInterval={100}\n      onReady={onReadyCallback}\n      onEnded={onEndedCallback}\n    />\n  );\n\n  // return (\n  //   <div title=\"Video Player\">\n  //     <video width=\"320\" height=\"240\" controls ref={vidRef}>\n  //     <source src=\"https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4\" type=\"video/mp4\" />\n  //     Your browser does not support the video tag.\n  //     </video>\n  //   </div>\n  // );\n};\n\n/**\n * Contains controls for manipulating multiple video players at once\n * TODO: Add missing controls\n * TODO: Turn time display into a control\n */\nconst VideoControls: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const isPlayPreview = useSelector(selectIsPlayPreview)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n\n  // Style\n  const videoControlStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n  })\n\n  const videoControlsRowStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n    gap: '50px',\n  })\n\n  const playButtonStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const playPreviewStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.05)',\n    },\n  })\n\n  return (\n    <div css={videoControlStyle} title=\"Video Controls\">\n      <div css={videoControlsRowStyle} title=\"Video Controls Top Row\">\n        <div style={{display: 'flex', gap: '10px', width: '50px', justifyContent: 'center'}}>\n          <FontAwesomeIcon icon={isPlayPreview ? faEyeSlash : faEye} size=\"1x\" title=\"Play Preview Icon\"/>\n          <FontAwesomeIcon css={playPreviewStyle} icon={isPlayPreview ? faToggleOn : faToggleOff} size=\"1x\"\n            title={\"Play Preview Switch: \" + isPlayPreview}\n            onClick={() => dispatch(setIsPlayPreview(!isPlayPreview))}\n          />\n        </div>\n        <FontAwesomeIcon css={playButtonStyle} icon={isPlaying ? faPause : faPlay} size=\"2x\"\n          title=\"Play Button\"\n          onClick={() => dispatch(setIsPlaying(!isPlaying))}\n        />\n        <div css={{display: 'inline-block', width: '110px'}}>\n          {new Date((currentlyAt ? currentlyAt : 0)).toISOString().substr(11, 12)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Displays elements above the video, e.g. title\n */\nconst VideoHeader: React.FC<{}> = () => {\n  const title = useSelector(selectTitle)\n  const presenters = useSelector(selectPresenters)\n\n  const titleStyle = css({\n    fontSize: 'large'\n  })\n\n  return (\n    <div title=\"Video Area Header\">\n      <div css={titleStyle} title=\"Video Title\">{title}</div>\n      <div title=\"Video Presenters\">by {presenters.join(\", \")}</div>\n    </div>\n  );\n}\n\nexport default Video;\n","export default __webpack_public_path__ + \"static/media/placeholder_waveform.d23b087b.png\";","import React, { useState, useRef, useEffect } from 'react'\n\nimport Draggable from 'react-draggable';\n\nimport { css } from '@emotion/core'\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Segment } from '../types'\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectSegments, selectActiveSegmentIndex, selectDuration,\n  setCurrentlyAt\n} from '../redux/videoSlice'\n\n// import { selectDuration, } from '../redux/videoURLSlice'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\n\nimport useResizeObserver from \"use-resize-observer\";\n\nimport myImg from '../img/placeholder_waveform.png'\n\n/**\n * A container for visualizing the cutting of the video, as well as for controlling\n * the current position in the video\n * Its width corresponds to the duration of the video\n */\nconst Timeline: React.FC<{}> = () => {\n\n  const { ref, width = 1, } = useResizeObserver<HTMLDivElement>();\n\n  const timelineStyle = css({\n    position: 'relative' as 'relative',     // Need to set position for Draggable bounds to work\n    height: '250px',\n    width: '100%',\n    //backgroundImage: `url({myImg})`,\n  });\n\n  return (\n  <div ref={ref} css={timelineStyle} title=\"Timeline\">\n    <Scrubber timelineWidth={width}/>\n    <div css={{height: '230px'}}>\n      <img alt='waveform2' src={myImg} style={{position: \"absolute\" as \"absolute\", height: '230px', width: '100%', top: '10px'}}></img>\n      <SegmentsList timelineWidth={width}/>\n    </div>\n  </div>\n  );\n};\n\n/**\n * Displays and defines the current position in the video\n * TODO: Fix position fail when starting and then quickly stopping the video\n *       Possibly because state.playedSceonds in Video is faulty for small values\n * TODO: Fix timeline width changes\n * @param param0\n */\nconst Scrubber: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n  const duration = useSelector(selectDuration)\n\n  // Init state variables\n  const [controlledPosition, setControlledPosition] = useState({x: 0,y: 0,});\n  const [isGrabbed, setIsGrabbed] = useState(false)\n  const wasCurrentlyAtRef = useRef(0)\n  const nodeRef = React.useRef(null); // For supressing \"ReactDOM.findDOMNode() is deprecated\" warning\n\n  // Reposition scrubber when the current x position was changed externally\n  useEffect(() => {\n    if(currentlyAt !== wasCurrentlyAtRef.current) {\n      updateXPos();\n      wasCurrentlyAtRef.current = currentlyAt;\n    }\n  })\n\n  // Reposition scrubber when the timeline width changes\n  useEffect(() => {\n    if(currentlyAt && duration) {\n      setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y: 0});\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timelineWidth])\n\n  // Callback for when the scrubber gets dragged by the user\n  // const onControlledDrag = (e: any, position: any) => {\n  //   const {x, y} = position;\n  //   dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n  // };\n\n  // Callback for when the position changes by something other than dragging\n  const updateXPos = () => {\n    const y = controlledPosition.y;\n    setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y});\n  };\n\n  const onStartDrag = () => {\n    setIsGrabbed(true)\n  }\n\n  const onStopDrag = (e: any, position: any) => {\n    const {x, y} = position;\n    setControlledPosition({x, y});\n    dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n\n    setIsGrabbed(false)\n  }\n\n  const scrubberStyle = css({\n    backgroundColor: 'rgba(255, 0, 0, 1)',\n    height: '250px',\n    width: '1px',\n    position: 'absolute' as 'absolute',\n    zIndex: 2,\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  });\n\n  const scrubberDragHandleStyle = css({\n    backgroundColor: 'rgba(255, 255, 255, 1)',\n    borderRadius: '10px',\n    height: '50px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: isGrabbed ? \"grabbing\" : \"grab\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const scrubberDragHandleIconStyle = css({\n    transform: 'scaleY(1.5) rotate(90deg)',\n    padding: '5px',\n  })\n\n  return (\n    <Draggable\n      //onDrag={onControlledDrag}\n      onStart={onStartDrag}\n      onStop={onStopDrag}\n      axis=\"x\"\n      bounds=\"parent\"\n      position={controlledPosition}\n      disabled={isPlaying}\n      nodeRef={nodeRef}\n      >\n      <div ref={nodeRef} css={scrubberStyle} title=\"Scrubber\">\n        <div css= {scrubberDragHandleStyle} title=\"dragHandle\">\n          <FontAwesomeIcon css={scrubberDragHandleIconStyle} icon={faBars} size=\"1x\" />\n        </div>\n      </div>\n    </Draggable>\n  );\n};\n\n/**\n * Container responsible for rendering the segments that are created when cuting\n * TODO: Complete styling\n */\nconst SegmentsList: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const segments = useSelector(selectSegments)\n  const duration = useSelector(selectDuration)\n  const activeSegmentIndex = useSelector(selectActiveSegmentIndex)\n\n  /**\n   * Returns a background color based on whether the segment is to be deleted\n   * and whether the segment is currently active\n   */\n  const bgColor = (deleted: boolean, index: boolean) => {\n    if (!deleted && !index) {\n      return 'rgba(0, 0, 255, 0.4)'\n    } else if (deleted && !index) {\n      return 'rgba(255, 0, 0, 0.4)'\n    } else if (!deleted && index) {\n      return 'rgba(0, 0, 200, 0.4)'\n    } else if (deleted && index) {\n      return 'rgba(200, 0, 0, 0.4)'\n    }\n  }\n\n  // Render the individual segments\n  const renderedSegments = () => {\n    return (\n      segments.map( (segment: Segment, index: number) => (\n        <div key={segment.id} title=\"Segment\" css={{\n          backgroundColor: bgColor(segment.deleted, activeSegmentIndex === index),//segment.state === \"alive\" ? 'rgba(0, 0, 255, 0.4)' : 'rgba(255, 0, 0, 0.4)',\n          borderRadius: '5px',\n          borderStyle: 'solid',\n          borderColor: 'white',\n          borderWidth: '1px',\n          boxSizing: 'border-box',\n          width: ((segment.end - segment.start) / duration) * 100 + '%',\n          height: '230px',\n          zIndex: 1,\n        }}>\n        </div>\n      ))\n    );\n  }\n\n  const segmentsStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    paddingTop: '10px',\n  })\n\n  return (\n    <div css={segmentsStyle} title=\"Segments\">\n      {renderedSegments()}\n    </div>\n  );\n};\n\nexport default Timeline;\n","import React from \"react\";\n\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition,\n  faCut,\n  faQuestion,\n  faStepBackward,\n  faStepForward,\n  faTrash,\n  faTrashRestore,\n  } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  cut, markAsDeletedOrAlive, selectIsCurrentSegmentAlive, mergeLeft, mergeRight\n} from '../redux/videoSlice'\n\n/**\n * Defines the different actions a user can perform while in cutting mode\n */\nconst CuttingActions: React.FC<{}> = () => {\n\n  const cuttingStyle =  css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-between',\n    gap: '30px',\n  })\n\n  const blockStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    gap: '30px',\n  })\n\n  return (\n    <div css={cuttingStyle}>\n        <div css={blockStyle}>\n          <CuttingActionsButton iconName={faCut} actionName=\"Cut\" action={cut}/>\n          <MarkAsDeletedButton />\n          <CuttingActionsButton iconName={faStepBackward} actionName=\"Merge Left\" action={mergeLeft}/>\n          <CuttingActionsButton iconName={faStepForward} actionName=\"Merge Right\" action={mergeRight}/>\n        </div>\n        <div css={blockStyle}>\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Reset changes\" action={null}/>\n          <CuttingActionsButton iconName={faQuestion} actionName=\"Undo\" action={null}/>\n        </div>\n    </div>\n  );\n};\n\n/**\n * CSS for cutting buttons\n */\nconst cuttingActionButtonStyle = {\n  padding: '16px',\n  boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n};\n\n/**\n * A button representing a single action a user can take while cutting\n * TODO: Add functionality\n * TODO: Complete styling\n * @param param0\n */\nconst CuttingActionsButton: React.FC<{iconName: IconDefinition, actionName: string, action: any}> = ({iconName, actionName, action}) => {\n\n  const dispatch = useDispatch();\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]} title={actionName}\n      onClick={() => action ? dispatch(action()) : \"\"}>\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{actionName}</span>\n    </div>\n  );\n};\n\n/**\n * Button that changes its function based on context\n */\nconst MarkAsDeletedButton : React.FC<{}> = () => {\n\n  const dispatch = useDispatch();\n  const isCurrentSegmentAlive = useSelector(selectIsCurrentSegmentAlive)\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]} title={isCurrentSegmentAlive ? \"Delete\" : \"Restore\"}\n      onClick={() => dispatch(markAsDeletedOrAlive())}>\n      <FontAwesomeIcon icon={isCurrentSegmentAlive ? faTrash : faTrashRestore} size=\"1x\" />\n      <div>{isCurrentSegmentAlive ? \"Delete\" : \"Restore\"}</div>\n    </div>\n  );\n}\n\nexport default CuttingActions;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSave, faFileExport, faTimesCircle, IconDefinition\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch } from 'react-redux';\nimport { setState, setPageNumber, finish } from '../redux/finishSlice'\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst FinishMenu : React.FC<{}> = () => {\n\n  const finishMenuStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-around',\n    gap: '30px',\n  })\n\n  return (\n    <div css={finishMenuStyle} title=\"Finish Menu\">\n        <FinishMenuButton iconName={faSave} stateName=\"Save changes\"/>\n        <FinishMenuButton iconName={faFileExport} stateName=\"Start processing\"/>\n        <FinishMenuButton iconName={faTimesCircle} stateName=\"Discard changes\"/>\n    </div>\n  );\n}\n\n/**\n * Buttons for the finish menu\n */\nconst FinishMenuButton: React.FC<{iconName: IconDefinition, stateName: finish[\"value\"]}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n\n  const finishMenuButtonStyle = css({\n    width: '250px',\n    height: '220px',\n    flexDirection: 'column' as const,\n    fontSize: \"x-large\",\n    gap: '30px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n  });\n\n  return (\n    <div css={[basicButtonStyle, finishMenuButtonStyle]} title={stateName}\n      onClick={() => {\n        dispatch(setState(stateName));\n        dispatch(setPageNumber(1))\n      }}>\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{stateName}</div>\n    </div>\n  );\n};\n\n\n\nexport default FinishMenu;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { Segment, PostEditArgument, httpRequestState } from '../types'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformation = createAsyncThunk('video/postVideoInformation', async (argument: PostEditArgument) => {\n  const response = await client.post(`https://pyca.opencast.org/editor/${argument.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), tracks: argument.tracks }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostSlice = createSlice({\n  name: 'workflowPostState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\ninterface segmentAPI {\n  start: number,\n  end: number,\n  deleted: boolean,\n  selected: boolean,\n}\n\n// Convert a segment from how it is stored in redux into\n// a segment that can be send to Opencast\nexport const convertSegments = (segments: Segment[]) => {\n  let newSegments: segmentAPI[] = []\n\n  segments.forEach(segment => {\n    newSegments.push({\n      start: segment.start,\n      end: segment.end,\n      deleted: segment.deleted,\n      selected: false,\n    })\n  });\n\n  return newSegments\n}\n\nexport const selectStatus = (state: { workflowPostState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\nexport default workflowPostSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle } from '../cssStyles'\nimport { mediaPackageId } from '../config'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSpinner, faCheck, faExclamationCircle, faChevronLeft, faSave,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinishState } from '../redux/finishSlice'\nimport { selectSegments, selectTracks } from '../redux/videoSlice'\nimport { postVideoInformation, selectStatus, selectError } from '../redux/workflowPostSlice'\n\nimport { PageButton } from './Finish'\n\n/**\n * Shown if the user wishes to save.\n * Informs the user about saving and displays a save button\n */\nconst Save : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const postWorkflowStatus = useSelector(selectStatus);\n  const postError = useSelector(selectError)\n\n  const saveStyle = css({\n    height: '100%',\n    display: finishState !== \"Save changes\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '30px',\n  })\n\n  const errorBoxStyle = css({\n    ...(postWorkflowStatus !== 'failed') && {display: \"none\"},\n    borderColor: 'red',\n    borderStyle: 'dashed',\n    fontWeight: 'bold',\n    padding: '10px',\n  })\n\n  return (\n    <div css={saveStyle} title=\"Save Area\">\n      <span>\n        Save the changes you made, but the video will not be cut yet. <br />\n        To make Opencast cut the video, please select \"Process\". <br />\n        Doth thou truly wish tah save?\n      </span>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"No, take me back\" iconName={faChevronLeft}/>\n        <SaveButton />\n      </div>\n      <div css={errorBoxStyle} title=\"Error Box\">\n        <span>An error has occured. Please wait a bit and try again. Details: </span><br />\n        {postError}<br />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Button that sends a post request to save current changes\n */\nconst SaveButton: React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const segments = useSelector(selectSegments)\n  const tracks = useSelector(selectTracks)\n  const workflowStatus = useSelector(selectStatus);\n\n  // Update based on current fetching status\n  let icon = faSave\n  let spin = false\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n    spin = true\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n    spin = false\n  } else if (workflowStatus === 'failed') {\n    icon = faExclamationCircle\n    spin = false\n  }\n\n  const saveButtonStyle = css({\n    width: '200px',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    justifyContent: 'space-around'\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Save Button\"}\n      onClick={() =>\n        dispatch(postVideoInformation({\n          segments: segments,\n          tracks: tracks,\n          mediaPackageId: mediaPackageId,\n        }))\n      }>\n      <FontAwesomeIcon icon={icon} spin={spin} size=\"1x\"/>\n      <span>{\"Yes, Save changes\"}</span>\n    </div>\n  );\n}\n\n\nexport default Save;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface abort {\n  value: boolean,\n}\n\nconst initialState: abort = {\n  value: false,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const abortSlice = createSlice({\n  name: 'abortState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<abort[\"value\"]>) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = abortSlice.actions\n\n// Export Selectors\nexport const selectAbortState = (state: { abortState: { value: abort[\"value\"] }; }) => state.abortState.value\n\nexport default abortSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle} from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faChevronLeft, faTimesCircle\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinishState } from '../redux/finishSlice'\nimport { setState as setAbortState } from '../redux/abortSlice'\n\nimport { PageButton } from './Finish'\n\n/**\n * Shown if the user wishes to abort.\n * Informs the user about aborting and displays abort button.\n */\nconst Discard : React.FC<{}> = () => {\n\n  const finishState = useSelector(selectFinishState)\n\n  const cancelStyle = css({\n    display: finishState !== \"Discard changes\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '30px',\n  })\n\n  return (\n    <div css={cancelStyle} title=\"Abort Area\">\n      <span>\n        Discard all the changes you made? They will be lost forever! <br />\n        Doth thou truly wish tah abort?\n      </span>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"No, take me back\" iconName={faChevronLeft} />\n        <DiscardButton />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Button that sets the app into an aborted state\n */\nconst DiscardButton : React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const saveButtonStyle = css({\n    width: '200px',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    justifyContent: 'space-around'\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Discard changes button\"}\n      onClick={() =>\n        dispatch(setAbortState(true))\n      }>\n      <FontAwesomeIcon  icon={faTimesCircle} size=\"1x\"/>\n      <span>{\"Yes, discard changes\"}</span>\n    </div>\n  );\n}\n\nexport default Discard;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle } from '../cssStyles'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, setSelectedWorkflowIndex } from '../redux/videoSlice'\nimport { selectFinishState, selectPageNumber } from '../redux/finishSlice'\n\nimport { PageButton } from './Finish'\nimport { faChevronLeft, faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\n\n/**\n * Allows the user to select a workflow\n */\nconst WorkflowSelection : React.FC<{}> = () => {\n\n  // Initialite redux states\n  const workflows = useSelector(selectWorkflows)\n  const finishState = useSelector(selectFinishState)\n  const pageNumber = useSelector(selectPageNumber)\n\n  // Create workflow selection\n  const workflowButtons = () => {\n    return (\n      workflows.map( (workflow: any, index: number) => (\n        <WorkflowButton key={index} stateName={workflow.name} workflowIndex={index}/>\n      ))\n    );\n  }\n\n  const workflowSelectionStyle = css({\n    display: (finishState === \"Start processing\" && pageNumber === 1) ? 'flex' : 'none',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: '50px',\n  })\n\n  const workflowSelectionSelectionStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'left',\n    gap: '20px',\n  })\n\n  return (\n    <div css={workflowSelectionStyle}>\n      <h2>Select a workflow</h2>\n      <div css={workflowSelectionSelectionStyle} title=\"Workflow Selection Area\">\n        {workflowButtons()}\n      </div>\n      <div>And this is where I would put a workflow description.... if I had one!</div>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label=\"Take me back\" iconName={faChevronLeft}/>\n        <PageButton pageNumber={2} label=\"Continue\" iconName={faChevronRight}/>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Clicking this button sets the associated workflow as selected\n * @param param0\n */\nconst WorkflowButton: React.FC<{stateName: string, workflowIndex: number}> = ({stateName, workflowIndex}) => {\n\n  const dispatch = useDispatch();\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n\n  const workflowButtonStyle = css({\n    backgroundColor: workflowIndex !== selectedWorkflowIndex ? 'snow' : '#DDD',\n    padding: '16px',\n  });\n\n  return (\n    <div css={[basicButtonStyle,workflowButtonStyle]} title={\"Workflow Button for \"+stateName}\n      onClick={() =>\n        dispatch(setSelectedWorkflowIndex(workflowIndex))\n      }>\n      <span>{stateName}</span>\n    </div>\n  );\n}\n\nexport default WorkflowSelection;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { PostAndProcessEditArgument, httpRequestState } from '../types'\n\nimport { convertSegments } from './workflowPostSlice'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformationWithWorkflow = createAsyncThunk('video/postVideoInformationWithWorkflow', async (argument: PostAndProcessEditArgument) => {\n  const response = await client.post(`https://pyca.opencast.org/editor/${argument.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), tracks: argument.tracks, workflows: argument.workflowID }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes and starting a workflow\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostAndProcessSlice = createSlice({\n  name: 'workflowPostAndProcessState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformationWithWorkflow.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\nexport const selectStatus = (state: { workflowPostAndProcessState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostAndProcessState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\n\nexport default workflowPostAndProcessSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle, backOrContinueStyle } from '../cssStyles'\nimport { mediaPackageId } from '../config'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\nimport { faSpinner, faCheck, faExclamationCircle, faChevronLeft, faFileExport } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, selectSegments, selectTracks, } from '../redux/videoSlice'\nimport { postVideoInformationWithWorkflow, selectStatus, selectError } from '../redux/workflowPostAndProcessSlice'\n\nimport { PageButton } from './Finish'\n\n/**\n * Will eventually display settings based on the selected workflow index\n */\nconst WorkflowConfiguration : React.FC<{}> = () => {\n\n  const postAndProcessWorkflowStatus = useSelector(selectStatus);\n  const postAndProcessError = useSelector(selectError)\n\n  const workflowConfigurationStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '30px',\n  })\n\n  const errorBoxStyle = css({\n    ...(postAndProcessWorkflowStatus !== 'failed') && {display: \"none\"},\n    borderColor: 'red',\n    borderStyle: 'dashed',\n    fontWeight: 'bold',\n    padding: '10px',\n  })\n\n  return (\n    <div css={workflowConfigurationStyle} title=\"Workflow Configuration Area\">\n      <h2>Workflow Configuration</h2>\n      <FontAwesomeIcon icon={faTools} size=\"10x\" />\n      Placeholder\n      <div>Satisfied with your configuration?</div>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={1} label=\"No, take me back\" iconName={faChevronLeft}/>\n        <SaveAndProcessButton />\n      </div>\n      <div css={errorBoxStyle} title=\"Error Box\">\n        <span>An error has occured. Please wait a bit and try again. Details: </span><br />\n        {postAndProcessError}\n      </div>\n    </div>\n  );\n\n}\n\n/**\n * Button that sends a post request to save current changes\n * and starts the selected workflow\n */\nconst SaveAndProcessButton: React.FC<{}> = () => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const workflows = useSelector(selectWorkflows)\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n  const segments = useSelector(selectSegments)\n  const tracks = useSelector(selectTracks)\n  const workflowStatus = useSelector(selectStatus);\n\n  // Update based on current fetching status\n  let icon = faFileExport\n  let spin = false\n  if (workflowStatus === 'loading') {\n    icon = faSpinner\n    spin = true\n  } else if (workflowStatus === 'success') {\n    icon = faCheck\n    spin = false\n  } else if (workflowStatus === 'failed') {\n    icon = faExclamationCircle\n    spin = false\n  }\n\n  const saveButtonStyle = css({\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Start processing button\"}\n      onClick={() =>\n        dispatch(postVideoInformationWithWorkflow({\n          segments: segments,\n          tracks: tracks,\n          mediaPackageId: mediaPackageId,\n          workflowID: [workflows[selectedWorkflowIndex]],\n        }))\n      }>\n      <FontAwesomeIcon  icon={icon} spin={spin} size=\"1x\"/>\n      <span>{\"Yes, start processing\"}</span>\n    </div>\n  );\n}\n\nexport default WorkflowConfiguration;\n","import React from \"react\";\n\nimport FinishMenu from \"./FinishMenu\";\nimport Save from \"./Save\"\nimport Discard from \"./Discard\"\nimport WorkflowSelection from \"./WorkflowSelection\";\nimport WorkflowConfiguration from \"./WorkflowConfiguration\";\n\nimport { css } from '@emotion/core'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPageNumber, setPageNumber } from '../redux/finishSlice'\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst Finish : React.FC<{}> = () => {\n\n  const pageNumber = useSelector(selectPageNumber)\n\n  const pageZeroStyle = css({\n    display: pageNumber !== 0 ? 'none' :'block',\n  })\n\n  const pageOneStyle = css({\n    display: pageNumber !== 1 ? 'none' :'block',\n  })\n\n  const pageTwoStyle = css({\n    display: pageNumber !== 2 ? 'none' :'block',\n  })\n\n  return (\n    <div  title=\"Finish\">\n      <div css={pageZeroStyle} >\n        <FinishMenu />\n      </div>\n      <div css={pageOneStyle} >\n        <Save />\n        <WorkflowSelection />\n        <Discard />\n      </div>\n      <div css={pageTwoStyle} >\n        <WorkflowConfiguration />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Takes you to a different page\n */\nexport const PageButton : React.FC<{pageNumber: number, label: string, iconName: IconDefinition}> = ({pageNumber, label, iconName}) => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const pageButtonStyle = css({\n    width: '200px',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    justifyContent: 'space-around'\n  })\n\n  return (\n    <div css={[basicButtonStyle, pageButtonStyle]} title={label}\n      onClick={() =>\n        dispatch(setPageNumber(pageNumber))\n      }>\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{label}</span>\n    </div>\n  );\n}\n\n\nexport default Finish;\n","import React from \"react\";\n\nimport Video from './Video';\nimport Timeline from './Timeline';\nimport CuttingActions from './CuttingActions';\nimport Finish from \"./Finish\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useSelector } from 'react-redux'\nimport { selectMainMenuState } from '../redux/mainMenuSlice'\n\nimport { MainMenuStateNames } from '../types'\n\n/**\n * A container for the main functionality\n * Shows different components depending on the state off the app\n */\nconst MainContent: React.FC<{}> = () => {\n\n  const mainMenuState = useSelector(selectMainMenuState)\n\n  const cuttingStyle = css({\n    display: mainMenuState !== MainMenuStateNames.cutting ? 'none' :'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n    paddingLeft: '20px',\n  })\n\n  const finishStyle = css({\n    display: mainMenuState !== MainMenuStateNames.finish ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    gap: \"20px\",\n    paddingRight: '20px',\n    height: '100%',\n  })\n\n  const defaultStyle = css({\n    display: (mainMenuState === MainMenuStateNames.cutting || mainMenuState === MainMenuStateNames.finish )\n              ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n     <div title=\"MainMenuContext\" css={{width: '100%'}}>\n      <div css={cuttingStyle} title=\"Cutting Container\">\n          <Video />\n          <CuttingActions />\n          <Timeline />\n      </div>\n      <div css={finishStyle} title=\"Finish Container\">\n        <Finish />\n      </div>\n      <div css={defaultStyle}>\n        <FontAwesomeIcon icon={faTools} size=\"10x\" />\n        Placeholder\n      </div>\n     </div>\n  );\n};\n\nexport default MainContent;\n","import React from \"react\";\n\nimport { css } from '@emotion/core'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faTimesCircle, faQuestion, } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector } from 'react-redux';\nimport { selectDuration } from '../redux/videoSlice'\nimport { selectStatus } from '../redux/workflowPostAndProcessSlice'\nimport { selectAbortState } from '../redux/abortSlice'\n\n/**\n * This page is to be displayed when the user is \"done\" with the editor\n * and should not be able to perfom any actions anymore\n * TODO: Improve state management somehow to avoid the possibility of an error case\n * TODO: Improve text\n * TODO: Add a button that closes the editor window/frame?\n */\nconst TheEnd : React.FC<{}> = () => {\n\n  // Init redux variables\n  const abortState = useSelector(selectAbortState)\n  const postAndProcessState = useSelector(selectStatus)\n  const duration = useSelector(selectDuration)\n\n  const icon = () => {\n    if (abortState) {\n      return faTimesCircle\n    } else if (postAndProcessState === \"success\") {\n      return faCheckCircle\n    } else {\n      return faQuestion\n    }\n  }\n\n  const text = () => {\n    if (abortState) {\n      return \"You really did it. All your changes are now lost forever. You can now continue doing whatever you want.\"\n    } else if (postAndProcessState === \"success\") {\n      return `Changes successfully saved to Opencast. Processing your changes may take up to\n              ${new Date((duration * 2)).toISOString().substr(11, 8)} hours.\n              You can now close the editor.`\n    } else {\n      return \"Now this is awkward. Something has gone very wrong.\"\n    }\n  }\n\n  const theEndStyle = css({\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '20px',\n    gap: '20px',\n  })\n\n  return (\n    <div css={theEndStyle} title=\"The last area\">\n      <FontAwesomeIcon icon={icon()} size=\"10x\" />\n      {text()}\n    </div>\n  );\n}\n\nexport default TheEnd","import React from \"react\";\n\nimport MainMenu from './MainMenu';\nimport MainContent from './MainContent';\nimport TheEnd from './TheEnd';\n\nimport { useSelector } from 'react-redux';\nimport { selectStatus as postAndProcessSelectStatus } from '../redux/workflowPostAndProcessSlice'\nimport { selectAbortState } from '../redux/abortSlice'\n\nconst Body: React.FC<{}> = () => {\n\n  const abortState = useSelector(selectAbortState)\n  const postAndProcessState = useSelector(postAndProcessSelectStatus)\n\n  // If we're in a special state, display a special page\n  // Otherwise display the normal page\n  const main = () => {\n    if(abortState || postAndProcessState === \"success\") {\n      return (\n        <TheEnd />\n      );\n    } else {\n      return (\n        <div css={bodyStyle} title=\"Body\">\n          <MainMenu />\n          <MainContent />\n        </div>\n      );\n    }\n  }\n\n  const bodyStyle = {\n    display: 'flex',\n    flexDirection: 'row' as const,\n    height: '100%',\n  };\n\n  return (\n    <React.Fragment>\n      {main()}\n    </React.Fragment>\n  );\n};\n\nexport default Body;\n","import React from 'react';\nimport Body from './main/Body';\nimport { GlobalStyle } from './cssStyles'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport mainMenuStateReducer from './mainMenuSlice'\nimport finishStateReducer from './finishSlice'\nimport videoReducer from './videoSlice'\nimport workflowPostReducer from './workflowPostSlice'\nimport workflowPostAndProcessReducer from './workflowPostAndProcessSlice'\nimport abortReducer from './abortSlice'\n\nexport default configureStore({\n  reducer: {\n    mainMenuState: mainMenuStateReducer,\n    finishState: finishStateReducer,\n    videoState: videoReducer,\n    workflowPostState: workflowPostReducer,\n    workflowPostAndProcessState: workflowPostAndProcessReducer,\n    abortState: abortReducer,\n  }\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nimport { init } from './config'\nimport { sleep } from './util/utilityFunctions'\n\n\n// Load config here\n// Load the rest of the application and try to fetch the settings file from the\n// server.\nconst initialize = Promise.race([\n  init(),\n  sleep(300),\n]);\n\nconst render = (body: JSX.Element) => {\n  ReactDOM.render(body, document.getElementById('root'));\n};\n\ninitialize.then(\n\n  () => {\n    ReactDOM.render(\n      <React.StrictMode>\n          <Provider store={store}>\n            <App />\n          </Provider>\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n  },\n\n  // This error case is vey unlikely to occur.\n  e => render(<p>\n    {`Fatal error while loading app: ${e.message}`}\n    <br />\n    This might be caused by a incorrect configuration by the system administrator.\n  </p>),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}